// Generated by CoffeeScript 1.10.0
(function() {
  var Builder, BuilderBase, TransformerBase, buildError, js2coffee;

  TransformerBase = require('./lib/transforms/base');

  BuilderBase = require('./lib/builder/base');

  Builder = require('./lib/builder');

  buildError = require('./lib/helpers').buildError;


  /**
   * # Js2coffee API
   */

  module.exports = js2coffee = function(source, options) {
    return js2coffee.build(source, options).code;
  };


  /**
   * js2coffee() : js2coffee(source, [options])
   * Compiles JavaScript into CoffeeScript.
   *
   *     output = js2coffee.build('a = 2', {});
   *
   *     output.code
   *     output.ast
   *     output.map
   *     output.warnings
   *
   * All options are optional. Available options are:
   *
   * ~ filename (String): the filename, used in source maps and errors.
   * ~ comments (Boolean): set to `false` to disable comments.
   *
   * Here's what it does:
   *
   * 1. Parse code into a JS AST (`.parseJS()`)
   * 2. Mutate the JS AST into a CoffeeScript AST (`.transform()`)
   * 3. Render the AST into CoffeeScript (`.generate()`)
   */

  js2coffee.build = function(source, options) {
    var ast, code, map, ref, ref1, warnings;
    if (options == null) {
      options = {};
    }
    if (options.filename == null) {
      options.filename = 'input.js';
    }
    if (options.indent == null) {
      options.indent = 2;
    }
    options.source = source;
    ast = js2coffee.parseJS(source, options);
    ref = js2coffee.transform(ast, options), ast = ref.ast, warnings = ref.warnings;
    ref1 = js2coffee.generate(ast, options), code = ref1.code, map = ref1.map;
    return {
      code: code,
      ast: ast,
      map: map,
      warnings: warnings
    };
  };


  /**
   * parseJS() : js2coffee.parseJS(source, [options])
   * Parses JavaScript code into an AST via Esprima.
   * Returns a JavaScript AST. Throws an error if parsing can't continue.
   *
   *     try
   *       ast = js2coffee.parseJS('var a = 2;')
   *     catch err
   *       ...
   */

  js2coffee.parseJS = function(source, options) {
    var Esprima, err, error;
    if (options == null) {
      options = {};
    }
    try {
      Esprima = require('esprima');
      return Esprima.parse(source, {
        loc: true,
        range: true,
        comment: true
      });
    } catch (error) {
      err = error;
      throw buildError(err, source, options.filename);
    }
  };


  /**
   * transform() : js2coffee.transform(ast, [options])
   * Mutates a given JavaScript syntax tree `ast` into a CoffeeScript AST.
   *
   *     ast = js2coffee.parseJS('var a = 2;')
   *     result = js2coffee.transform(ast)
   *
   *     result.ast
   *     result.warnings
   *
   * This performs a few traversals across the tree using traversal classes
   * (TransformerBase subclasses).
   *
   * These transformations will need to be done in multiple passes. The earlier
   * steps (function, comment, etc) will make drastic modifications to the tree
   * that the other transformations will need to pick up.
   */

  js2coffee.transform = function(ast, options) {
    var comments, ctx, run;
    if (options == null) {
      options = {};
    }
    ctx = {};
    run = function(classes) {
      return TransformerBase.run(ast, options, classes, ctx);
    };
    comments = !(options.comments === false);
    if (comments) {
      run([require('./lib/transforms/comments')]);
    }
    run([require('./lib/transforms/functions')]);
    run([require('./lib/transforms/exponents'), require('./lib/transforms/ifs'), require('./lib/transforms/iife'), require('./lib/transforms/literals'), require('./lib/transforms/loops'), require('./lib/transforms/members'), require('./lib/transforms/objects'), require('./lib/transforms/binary'), require('./lib/transforms/empty_statements'), require('./lib/transforms/others'), require('./lib/transforms/precedence'), require('./lib/transforms/returns'), require('./lib/transforms/switches'), require('./lib/transforms/unsupported')]);
    run([require('./lib/transforms/blocks')]);
    return {
      ast: ast,
      warnings: ctx.warnings
    };
  };


  /**
   * generate() : js2coffee.generate(ast, [options])
   * Generates CoffeeScript code from a given CoffeeScript AST. Returns an object
   * with `code` (CoffeeScript source code) and `map` (source mapping object).
   *
   *     ast = js2coffee.parse('var a = 2;')
   *     ast = js2coffee.transform(ast)
   *     {code, map} = generate(ast)
   */

  js2coffee.generate = function(ast, options) {
    if (options == null) {
      options = {};
    }
    return new Builder(ast, options).get();
  };


  /**
   * version : js2coffee.version
   * The version number
   */

  js2coffee.version = require('./package.json').version;

}).call(this);

//# sourceMappingURL=js2coffee.js.map
