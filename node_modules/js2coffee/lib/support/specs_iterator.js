// Generated by CoffeeScript 1.10.0
(function() {
  var coffee, fs, glob, path;

  coffee = require('coffee-script');

  glob = require('glob');

  path = require('path');

  fs = require('fs');

  exports.root = __dirname + "/../../specs";

  exports.toName = function(dirname) {
    var s;
    s = path.basename(dirname).replace(/_/g, ' ').trim();
    s = s.replace(/\.txt$/, '');
    return s.substr(0, 1).toUpperCase() + s.substr(1);
  };


  /*
   * eachGroup()
   * Iterates through each spec group.
   *
   *     eachGroup (group) ->
   *       group.name
   *       group.pending
   *       group.specs.forEach (spec) ->
   *         spec.name
   *         spec.input
   *         spec.output
   *         spec.meta
   *         spec.pending
   */

  exports.eachGroup = function(fn) {
    var group, groups, i, len, name, pending, results, specDirs, specs;
    groups = glob.sync(exports.root + "/*");
    results = [];
    for (i = 0, len = groups.length; i < len; i++) {
      group = groups[i];
      specDirs = glob.sync(group + "/*");
      specs = specDirs.map(function(spec) {
        var data, input, meta, name, output, ref;
        data = fs.readFileSync(spec, 'utf-8');
        name = exports.toName(spec);
        ref = data.split('----\n'), meta = ref[0], input = ref[1], output = ref[2];
        if (meta.length) {
          meta = eval(coffee.compile(meta, {
            bare: true
          }));
        }
        if (meta == null) {
          meta = {};
        }
        return {
          name: name,
          input: input,
          output: output,
          meta: meta
        };
      });
      if (specs.length) {
        name = exports.toName(group);
        pending = ~group.indexOf('pending');
        results.push(fn({
          name: name,
          pending: pending,
          specs: specs
        }));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

}).call(this);

//# sourceMappingURL=specs_iterator.js.map
