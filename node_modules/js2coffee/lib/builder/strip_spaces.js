// Generated by CoffeeScript 1.10.0
(function() {
  var newLine, replace, stripIndents, stripMid, stripPost, stripPre, stripSpaces;

  newLine = /^\s*\n+\s*$/;


  /*
   * Strips spaces out of the SourceNode.
   */

  stripSpaces = function(node) {
    node = stripPre(node);
    node = stripPost(node);
    node = stripMid(node);
    node = stripIndents(node);
    return node;
  };


  /*
   * Strip lines that only have indents
   */

  stripIndents = function(node) {
    var indent, step;
    step = 0;
    indent = null;
    return replace(node, {}, function(str) {
      if (step === 0 || step === 1 && str.match(newLine)) {
        step = 1;
        return str;
      } else if (step === 1 && str.match(/^[ \t]+$/)) {
        indent = str;
        step = 2;
        return "";
      } else if (step === 2) {
        step = 1;
        if (str.match(newLine)) {
          return str;
        } else {
          return indent + str;
        }
      } else {
        step = 0;
        return str;
      }
    });
  };


  /*
   * Strip beginning newlines.
   */

  stripPre = function(node) {
    return replace(node, {}, function(str) {
      if (str.match(newLine)) {
        return "";
      } else {
        this["break"]();
        return str;
      }
    });
  };


  /*
   * Strip ending newlines.
   */

  stripPost = function(node) {
    return replace(node, {
      reverse: true
    }, function(str) {
      if (str.match(newLine)) {
        return "";
      } else {
        this["break"]();
        return str + "\n";
      }
    });
  };


  /*
   * Strip triple new lines.
   */

  stripMid = function(node) {
    var streak;
    streak = 0;
    return replace(node, {}, function(n) {
      if (n === "\n") {
        streak += 1;
      } else if (n.match(/^\s*$/)) {

      } else {
        streak = 0;
      }
      if (streak >= 3) {
        return "";
      } else {
        return n;
      }
    });
  };


  /*
   * Walk and replace.
   *
   *     replace node, {}, (str) ->
   *       if str is "true"
   *         "replacement"
   *       else
   *         str
   */

  replace = function(node, options, fn) {
    var broken, ctx, walk;
    if (options == null) {
      options = {};
    }
    broken = false;
    ctx = {
      "break": function(str) {
        return broken = true;
      }
    };
    walk = function(node, options, fn) {
      var child, i, j, k, l, len, output, range, ref, ref1, results, results1;
      if (options == null) {
        options = {};
      }
      range = options.reverse ? (function() {
        results = [];
        for (var j = ref = node.children.length - 1; ref <= 0 ? j <= 0 : j >= 0; ref <= 0 ? j++ : j--){ results.push(j); }
        return results;
      }).apply(this) : (function() {
        results1 = [];
        for (var k = 0, ref1 = node.children.length; 0 <= ref1 ? k < ref1 : k > ref1; 0 <= ref1 ? k++ : k--){ results1.push(k); }
        return results1;
      }).apply(this);
      for (l = 0, len = range.length; l < len; l++) {
        i = range[l];
        if (broken) {
          return node;
        }
        child = node.children[i];
        if (!child) {

        } else if (child.children) {
          walk(child, options, fn);
        } else if (child !== '') {
          output = fn.call(ctx, child);
          node.children[i] = output;
        }
      }
      return node;
    };
    return walk.call(ctx, node, options, fn);
  };

  module.exports = stripSpaces;

}).call(this);

//# sourceMappingURL=strip_spaces.js.map
