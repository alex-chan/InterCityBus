// Generated by CoffeeScript 1.10.0
(function() {
  var BuilderBase, stripSpaces,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  stripSpaces = require('./strip_spaces');


  /*
   * BuilderBase:
   * Traverses a JavaScript AST.
   *
   * Provides an easy way to define visitors for each node type. Each visitor will
   * return an array of strings that the node is compiled into.
   *
   *     class MyBuilder extends BuilderBase
   *       BinaryExpression: (node) ->
   *         [ @walk(node.left), node.operator, @walk(node.right) ]
   *
   *       Literal: (node) ->
   *         [ node.raw ]
   *
   *     w = new MyBuilder(ast)
   *     w.run()
   *
   * If a `decorator` method is present, the results are wrapped in it first. This
   * is used to implement source maps.
   *
   *     class MyBuilder extends BuilderBase
   *       decorator: (result) ->
   *         dostuffwith(result)
   */

  BuilderBase = (function() {
    function BuilderBase(root, options) {
      this.root = root;
      this.options = options != null ? options : {};
      this.walk = bind(this.walk, this);
      this.path = [];
    }

    BuilderBase.prototype.run = function() {
      return this.walk(this.root);
    };

    BuilderBase.prototype.walk = function(node, type) {
      var fn, oldLength, out;
      oldLength = this.path.length;
      this.path.push(node);
      if (typeof type !== 'string') {
        type = void 0;
      }
      type || (type = node.type);
      this.ctx = {
        path: this.path,
        type: type,
        parent: this.path[this.path.length - 2]
      };
      fn = this[type];
      if (fn) {
        out = fn.call(this, node, this.ctx);
        if (this.decorator != null) {
          out = this.decorator(node, out);
        }
      } else {
        out = this.onUnknownNode(node, this.ctx);
      }
      this.path.splice(oldLength);
      return out;
    };


    /**
     * get():
     * Returns the output of source-map.
     */

    BuilderBase.prototype.get = function() {
      var node;
      node = this.run();
      node = stripSpaces(node);
      return node.toStringWithSourceMap();
    };


    /**
     * decorator():
     * Takes the output of each of the node visitors and turns them into
     * a `SourceNode`.
     */

    BuilderBase.prototype.decorator = function(node, output) {
      var SourceNode, ref, ref1, ref2, ref3;
      SourceNode = require("source-map").SourceNode;
      return new SourceNode(node != null ? (ref = node.loc) != null ? (ref1 = ref.start) != null ? ref1.line : void 0 : void 0 : void 0, node != null ? (ref2 = node.loc) != null ? (ref3 = ref2.start) != null ? ref3.column : void 0 : void 0 : void 0, this.options.filename, output);
    };

    return BuilderBase;

  })();

  module.exports = BuilderBase;

}).call(this);

//# sourceMappingURL=base.js.map
