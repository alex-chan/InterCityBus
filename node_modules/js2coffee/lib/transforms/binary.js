// Generated by CoffeeScript 1.10.0
(function() {
  var TransformerBase,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TransformerBase = require('./base');


  /*
   * Mangles the AST with various CoffeeScript tweaks.
   */

  module.exports = (function(superClass) {
    extend(_Class, superClass);

    function _Class() {
      return _Class.__super__.constructor.apply(this, arguments);
    }

    _Class.prototype.BinaryExpression = function(node) {
      this.warnAboutEquals(node);
      this.updateEquals(node);
      return this.escapeEqualsForCompatibility(node);
    };


    /*
     * Updates equals to their CoffeeScript equivalents.
     */

    _Class.prototype.updateEquals = function(node) {
      var dict, op;
      dict = {
        '===': '==',
        '!==': '!='
      };
      op = node.operator;
      if (dict[op]) {
        node.operator = dict[op];
      }
      return node;
    };

    _Class.prototype.escapeEqualsForCompatibility = function(node) {
      var isIncompatible;
      isIncompatible = node.operator === '==' || node.operator === '!=';
      if (this.options.compat && isIncompatible) {
        return this.escapeJs(node);
      } else {
        return node;
      }
    };


    /*
     * Fire warnings when '==' is used
     */

    _Class.prototype.warnAboutEquals = function(node) {
      var op, repl, replacements;
      op = node.operator;
      replacements = {
        '==': '===',
        '!=': '!=='
      };
      if (op === '==' || op === '!=') {
        repl = replacements[op];
        this.warn(node, ("Operator '" + op + "' is not supported in CoffeeScript, ") + ("use '" + repl + "' instead"));
      }
      return node;
    };

    return _Class;

  })(TransformerBase);

}).call(this);

//# sourceMappingURL=binary.js.map
