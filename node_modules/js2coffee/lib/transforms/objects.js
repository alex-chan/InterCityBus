// Generated by CoffeeScript 1.10.0
(function() {
  var TransformerBase, hasNullIn,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TransformerBase = require('./base');


  /*
   * Mangles the AST with various CoffeeScript tweaks.
   */

  module.exports = (function(superClass) {
    extend(_Class, superClass);

    function _Class() {
      return _Class.__super__.constructor.apply(this, arguments);
    }

    _Class.prototype.ArrayExpression = function(node) {
      this.braceObjectsInElements(node);
      return this.catchEmptyArraySlots(node);
    };

    _Class.prototype.ObjectExpression = function(node, parent) {
      return this.braceObjectInExpression(node, parent);
    };


    /*
     * Braces an object
     */

    _Class.prototype.braceObjectInExpression = function(node, parent) {
      var isLastInScope, ref, ref1;
      if (parent.type === 'ExpressionStatement') {
        isLastInScope = ((ref = this.scope.body) != null ? ref[((ref1 = this.scope.body) != null ? ref1.length : void 0) - 1] : void 0) === parent;
        if (isLastInScope) {
          node._last = true;
        } else {
          node._braced = true;
        }
      }
    };


    /*
     * Ensures that an Array's elements objects are braced.
     */

    _Class.prototype.braceObjectsInElements = function(node) {
      var i, item, len, ref;
      ref = node.elements;
      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];
        if ((item != null ? item.type : void 0) === 'ObjectExpression') {
          item._braced = true;
        }
      }
      return node;
    };

    _Class.prototype.catchEmptyArraySlots = function(node) {
      if (hasNullIn(node.elements)) {
        if (this.options.compat) {
          return this.escapeJs(node);
        } else {
          return this.syntaxError(node, 'Empty array slots are not supported in CoffeeScript');
        }
      }
    };

    return _Class;

  })(TransformerBase);

  hasNullIn = function(elements) {
    var i, len, node;
    for (i = 0, len = elements.length; i < len; i++) {
      node = elements[i];
      if (node === null) {
        return true;
      }
    }
    return false;
  };

}).call(this);

//# sourceMappingURL=objects.js.map
