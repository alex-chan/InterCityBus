// Generated by CoffeeScript 1.10.0
(function() {
  var TransformerBase, isAllIdentifiers, isIife, replace, sameArgs,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  replace = require('../helpers').replace;

  TransformerBase = require('./base');


  /*
   * Converts `function () {} ()` into `do ->`.
   */

  module.exports = (function(superClass) {
    extend(_Class, superClass);

    function _Class() {
      return _Class.__super__.constructor.apply(this, arguments);
    }

    _Class.prototype.CallExpression = function(node) {
      var valid;
      valid = isIife(node) && isAllIdentifiers(node["arguments"]) && sameArgs(node.callee.params, node["arguments"]);
      if (!valid) {
        return node;
      }
      return replace(node, {
        type: 'CoffeeDoExpression',
        "function": node.callee,
        "arguments": node["arguments"]
      });
    };

    return _Class;

  })(TransformerBase);


  /*
   * Helper: ensure all nodes in `args` are Identifiers
   */

  isAllIdentifiers = function(args) {
    var arg, i, len;
    for (i = 0, len = args.length; i < len; i++) {
      arg = args[i];
      if (arg.type !== 'Identifier') {
        return false;
      }
    }
    return true;
  };


  /*
   * Helper: ensure a CallExpression is an IIFE
   */

  isIife = function(node) {
    var ref, ref1;
    return ((ref = node.callee) != null ? ref.type : void 0) === 'FunctionExpression' && ((ref1 = node.callee) != null ? ref1.id : void 0) === null;
  };


  /*
   * Helper: ensure argument names are the same
   */

  sameArgs = function(left, right) {
    return left.map(function(p) {
      return p.name;
    }).join("/") === right.map(function(p) {
      return p.name;
    }).join("/");
  };

}).call(this);

//# sourceMappingURL=iife.js.map
