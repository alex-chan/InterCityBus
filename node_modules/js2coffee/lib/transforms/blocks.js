// Generated by CoffeeScript 1.10.0
(function() {
  var BlockTransforms, TransformerBase,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  TransformerBase = require('./base');


  /*
   * Flattens nested `BlockStatements`.
   */

  module.exports = BlockTransforms = (function(superClass) {
    extend(BlockTransforms, superClass);

    function BlockTransforms() {
      return BlockTransforms.__super__.constructor.apply(this, arguments);
    }

    BlockTransforms.prototype.BlockStatement = function(node, parent) {
      return this.consolidateBlockIntoParent(node, parent);
    };


    /*
     * Melds a block into a parent's body
     */

    BlockTransforms.prototype.consolidateBlockIntoParent = function(node, parent) {
      var consolidateIf, skipped;
      skipped = false;
      consolidateIf = (function(_this) {
        return function(type, body) {
          var idx, ref, ref1;
          if (parent.type === type && ((ref = parent[body]) != null ? ref.indexOf : void 0)) {
            idx = parent[body].indexOf(node);
            if (parent[body] && ~idx) {
              (ref1 = parent[body]).splice.apply(ref1, [idx, 1].concat(slice.call(node.body)));
              skipped = true;
              return true;
            }
          }
        };
      })(this);
      consolidateIf('BlockStatement', 'body') || consolidateIf('SwitchCase', 'consequent') || consolidateIf('IfStatement', 'consequent') || consolidateIf('IfStatement', 'alternate');
      if (skipped) {
        return this.skip();
      } else {
        return node;
      }
    };

    return BlockTransforms;

  })(TransformerBase);

}).call(this);

//# sourceMappingURL=blocks.js.map
