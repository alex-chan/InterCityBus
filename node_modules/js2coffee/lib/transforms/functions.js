// Generated by CoffeeScript 1.10.0
(function() {
  var TransformerBase, firstNonVar, isComment, nextNonComment, ref, replace,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  ref = require('../helpers'), isComment = ref.isComment, nextNonComment = ref.nextNonComment, replace = ref.replace;

  TransformerBase = require('./base');


  /*
   * FunctionTransforms:
   * Reorders functions.
   *
   * * Moves function definitions (`function x(){}`) to the top of the scope and
   *   turns them into variable declarations (`x = -> ...`).
   *
   * * Moves named function expressions (`setTimeout(function tick(){})`) to the
   *   top of the scope.
   */

  module.exports = (function(superClass) {
    extend(_Class, superClass);

    function _Class() {
      return _Class.__super__.constructor.apply(this, arguments);
    }

    _Class.prototype.onScopeEnter = function(scope, ctx) {
      return ctx.prebody = [];
    };

    _Class.prototype.onScopeExit = function(scope, ctx, subscope, subctx) {
      if (subctx.prebody.length) {
        return this.prependIntoBody(scope.body, subctx.prebody);
      }
    };

    _Class.prototype.prependIntoBody = function(body, prebody) {
      var idx;
      idx = firstNonVar(body);
      return body.splice.apply(body, [idx, 0].concat(slice.call(prebody)));
    };

    _Class.prototype.FunctionDeclaration = function(node) {
      this.ctx.prebody.push(this.buildFunctionDeclaration(node));
      this.pushStack(node.body);
    };

    _Class.prototype.FunctionDeclarationExit = function(node) {
      this.popStack(node);
      return this.remove();
    };

    _Class.prototype.LineComment = function(node, parent) {
      return this.moveFunctionComments(node, parent);
    };

    _Class.prototype.BlockComment = function(node, parent) {
      return this.moveFunctionComments(node, parent);
    };

    _Class.prototype.FunctionExpression = function(node) {
      this.pushStack(node.body);
    };

    _Class.prototype.FunctionExpressionExit = function(node) {
      this.popStack();
      if (node.id) {
        if (this.options.compat) {
          return this.escapeJs(node, {
            parenthesized: true
          });
        } else {
          this.warn(node, "Named function expressions are not supported in CoffeeScript");
          return node;
        }
      } else {
        return node;
      }
    };


    /*
     * If a comment is adjacent to a function,
     * move them up as well together with the function.
     */

    _Class.prototype.moveFunctionComments = function(node, parent) {
      var isFn, next;
      if (!parent.body) {
        return;
      }
      next = nextNonComment(parent.body, node);
      if (!next) {
        return;
      }
      isFn = next.type === 'FunctionExpression' && next.id;
      isFn || (isFn = next.type === 'FunctionDeclaration');
      if (isFn) {
        this.ctx.prebody.push(node);
        return this.remove();
      }
    };


    /*
     * Returns a `a = -> ...` statement out of a FunctionDeclaration node.
     */

    _Class.prototype.buildFunctionDeclaration = function(node) {
      return replace(node, {
        type: 'VariableDeclaration',
        declarations: [
          {
            type: 'VariableDeclarator',
            id: node.id,
            init: {
              type: 'FunctionExpression',
              params: node.params,
              defaults: node.defaults,
              body: node.body
            }
          }
        ]
      });
    };

    return _Class;

  })(TransformerBase);


  /*
   * Looks up the first non-variable-declaration in a body
   */

  firstNonVar = function(body) {
    var i, j, len, node;
    i = 0;
    for (i = j = 0, len = body.length; j < len; i = ++j) {
      node = body[i];
      if (node.type !== 'VariableDeclaration' && !isComment(node)) {
        return i;
      }
    }
    return i;
  };

}).call(this);

//# sourceMappingURL=functions.js.map
