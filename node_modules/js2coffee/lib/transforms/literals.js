// Generated by CoffeeScript 1.10.0
(function() {
  var TransformerBase, quote, ref, replace,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = require('../helpers'), replace = ref.replace, quote = ref.quote;

  TransformerBase = require('./base');


  /*
   * Transforms strings, regexes, etc
   */

  module.exports = (function(superClass) {
    extend(_Class, superClass);

    function _Class() {
      return _Class.__super__.constructor.apply(this, arguments);
    }

    _Class.prototype.Literal = function(node) {
      return this.unpackRegexpIfNeeded(node);
    };


    /*
     * Accounts for regexps that start with an equal sign or space.
     */

    _Class.prototype.unpackRegexpIfNeeded = function(node) {
      var m;
      if (!(node.value instanceof RegExp)) {
        return;
      }
      m = node.value.toString().match(/^\/([\s\=].*)\/([a-z]*)$/);
      if (m) {
        node = replace(node, {
          type: 'CallExpression',
          callee: {
            type: 'Identifier',
            name: 'RegExp'
          },
          "arguments": [
            {
              type: 'Literal',
              value: m[1],
              raw: quote(m[1])
            }
          ]
        });
        if (m[2]) {
          node["arguments"].push({
            type: 'Literal',
            value: m[2],
            raw: quote(m[2])
          });
        }
        return node;
      }
    };

    return _Class;

  })(TransformerBase);

}).call(this);

//# sourceMappingURL=literals.js.map
