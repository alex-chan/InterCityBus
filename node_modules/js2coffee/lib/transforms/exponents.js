// Generated by CoffeeScript 1.10.0
(function() {
  var TransformerBase, replace,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  replace = require('../helpers').replace;

  TransformerBase = require('./base');


  /*
   * Transforms `Math.pow(2,8)` into `2 ** 8`
   */

  module.exports = (function(superClass) {
    extend(_Class, superClass);

    function _Class() {
      return _Class.__super__.constructor.apply(this, arguments);
    }

    _Class.prototype.CallExpression = function(node) {
      var isExponent, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9;
      isExponent = ((ref = node.callee) != null ? ref.type : void 0) === 'MemberExpression' && ((ref1 = node.callee) != null ? (ref2 = ref1.object) != null ? ref2.type : void 0 : void 0) === 'Identifier' && ((ref3 = node.callee) != null ? (ref4 = ref3.object) != null ? ref4.name : void 0 : void 0) === 'Math' && ((ref5 = node.callee) != null ? (ref6 = ref5.property) != null ? ref6.type : void 0 : void 0) === 'Identifier' && ((ref7 = node.callee) != null ? (ref8 = ref7.property) != null ? ref8.name : void 0 : void 0) === 'pow' && ((ref9 = node["arguments"]) != null ? ref9.length : void 0) === 2;
      if (!isExponent) {
        return node;
      }
      return replace(node, {
        type: 'BinaryExpression',
        left: node["arguments"][0],
        operator: '**',
        right: node["arguments"][1]
      });
    };

    return _Class;

  })(TransformerBase);

}).call(this);

//# sourceMappingURL=exponents.js.map
