// Generated by CoffeeScript 1.10.0
(function() {
  var TransformerBase,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TransformerBase = require('./base');


  /*
   * Injects comments as nodes in the AST. This takes the comments in the
   * `Program` node, finds list of expressions in bodies (eg, a BlockStatement's
   * `body`), and injects the comment nodes wherever relevant.
   *
   * Comments will be injected as `BlockComment` and `LineComment` nodes.
   */

  module.exports = (function(superClass) {
    extend(_Class, superClass);

    function _Class() {
      return _Class.__super__.constructor.apply(this, arguments);
    }

    _Class.prototype.ProgramExit = null;

    _Class.prototype.FunctionExpression = null;

    _Class.prototype.FunctionExpressionExit = null;

    _Class.prototype.Program = function(node) {
      this.comments = node.comments;
      this.updateCommentTypes();
      node.body = this.addCommentsToList([0, Infinity], node.body);
      return node;
    };

    _Class.prototype.BlockStatement = function(node) {
      return this.injectComments(node, 'body');
    };

    _Class.prototype.SwitchStatement = function(node) {
      return this.injectComments(node, 'cases');
    };

    _Class.prototype.SwitchCase = function(node) {
      return this.injectComments(node, 'consequent');
    };

    _Class.prototype.BlockComment = function(node) {
      return this.convertCommentPrefixes(node);
    };


    /*
     * Updates comment `type` as needed. It changes *Block* to *BlockComment*, and
     * *Line* to *LineComment*. This makes it play nice with the rest of the AST,
     * because "Block" and "Line" are ambiguous.
     */

    _Class.prototype.updateCommentTypes = function() {
      var c, j, len, ref, results;
      ref = this.comments;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        c = ref[j];
        switch (c.type) {
          case 'Block':
            results.push(c.type = 'BlockComment');
            break;
          case 'Line':
            results.push(c.type = 'LineComment');
            break;
          default:
            results.push(void 0);
        }
      }
      return results;
    };


    /*
     * Injects comment nodes into a node list.
     */

    _Class.prototype.injectComments = function(node, body) {
      if (body == null) {
        body = 'body';
      }
      node[body] = this.addCommentsToList(node.range, node[body]);
      return node;
    };


    /*
     * Delegate of `injectComments()`.
     *
     * Checks out the `@comments` list for any relevants comments, and injects
     * them into the correct places in the given `body` Array. Returns the
     * transformed `body` array.
     */

    _Class.prototype.addCommentsToList = function(range, body) {
      var findComments, i, item, j, left, len, list, newComments, right;
      if (range == null) {
        return body;
      }
      list = [];
      left = range[0];
      right = range[1];
      findComments = (function(_this) {
        return function(left, right) {
          return _this.comments.filter(function(c) {
            return c.range[0] >= left && c.range[1] <= right;
          });
        };
      })(this);
      if (body.length > 0) {
        for (i = j = 0, len = body.length; j < len; i = ++j) {
          item = body[i];
          if (item.range) {
            newComments = findComments(left, item.range[0]);
            list = list.concat(newComments);
          }
          list.push(item);
          if (item.range) {
            left = item.range[1];
          }
        }
      }
      newComments = findComments(left, right);
      list = list.concat(newComments);
      return list;
    };


    /*
     * Changes JS block comments into CoffeeScript block comments.
     * This involves changing prefixes like `*` into `#`.
     */

    _Class.prototype.convertCommentPrefixes = function(node) {
      var inLevel, lines;
      lines = node.value.split("\n");
      inLevel = node.loc.start.column;
      lines = lines.map(function(line, i) {
        var isSingleLine, isTrailingSpace, predent;
        isTrailingSpace = i === lines.length - 1 && line.match(/^\s*$/);
        isSingleLine = i === 0 && lines.length === 1;
        predent = line.substr(0, inLevel);
        if (predent.match(/^\s+$/)) {
          line = line.substr(inLevel);
        }
        if (isTrailingSpace) {
          return '';
        } else if (isSingleLine) {
          return line;
        } else {
          line = line.replace(/^ \*/, '#');
          return line + "\n";
        }
      });
      node.value = lines.join("");
      return node;
    };

    return _Class;

  })(TransformerBase);

}).call(this);

//# sourceMappingURL=comments.js.map
