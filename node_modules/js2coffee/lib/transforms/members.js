// Generated by CoffeeScript 1.10.0
(function() {
  var TransformerBase, replace,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  replace = require('../helpers').replace;

  TransformerBase = require('./base');


  /*
   * Performs transformations on `a.b` scope resolutions.
   *
   *     this.x            =>  @x
   *     x.prototype.y     =>  x::y
   *     this.prototype.y  =>  @::y
   *     function(){}.y    =>  (->).y
   */

  module.exports = (function(superClass) {
    extend(_Class, superClass);

    function _Class() {
      return _Class.__super__.constructor.apply(this, arguments);
    }

    _Class.prototype.MemberExpression = function(node) {
      this.transformThisToAtSign(node);
      this.braceObjectOnLeft(node);
      return this.replaceWithPrototype(node) || this.parenthesizeObjectIfFunction(node);
    };

    _Class.prototype.CoffeePrototypeExpression = function(node) {
      return this.transformThisToAtSign(node);
    };


    /*
     * Converts `this.x` into `@x` for MemberExpressions.
     */

    _Class.prototype.transformThisToAtSign = function(node) {
      if (node.object.type === 'ThisExpression') {
        node._prefixed = true;
        node.object._prefix = true;
      }
      return node;
    };

    _Class.prototype.braceObjectOnLeft = function(node) {
      if (node.object.type === 'ObjectExpression') {
        node.object._braced = true;
      }
    };


    /*
     * Replaces `a.prototype.b` with `a::b` in a member expression.
     */

    _Class.prototype.replaceWithPrototype = function(node) {
      var isPrototype;
      isPrototype = node.computed === false && node.object.type === 'MemberExpression' && node.object.property.type === 'Identifier' && node.object.property.name === 'prototype';
      if (isPrototype) {
        return this.recurse(replace(node, {
          type: 'CoffeePrototypeExpression',
          object: node.object.object,
          property: node.property
        }));
      }
    };


    /*
     * Parenthesize function expressions if they're in the left-hand side of a
     * member expression (eg, `(-> x).toString()`).
     */

    _Class.prototype.parenthesizeObjectIfFunction = function(node) {
      if (node.object.type === 'FunctionExpression') {
        node.object._parenthesized = true;
      }
      return node;
    };

    return _Class;

  })(TransformerBase);

}).call(this);

//# sourceMappingURL=members.js.map
