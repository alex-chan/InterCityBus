// Generated by CoffeeScript 1.10.0
(function() {
  var TransformerBase, getReturnStatements,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  getReturnStatements = require('../helpers').getReturnStatements;

  TransformerBase = require('./base');


  /*
   * Does transformations pertaining to `return` statements.
   */

  module.exports = (function(superClass) {
    extend(_Class, superClass);

    function _Class() {
      return _Class.__super__.constructor.apply(this, arguments);
    }

    _Class.prototype.onScopeExit = function(scope, ctx, subscope, subctx) {
      return this.unreturnify(scope);
    };


    /*
     * Removes return statements
     */

    _Class.prototype.unreturnify = function(node, body) {
      var returns;
      if (body == null) {
        body = 'body';
      }
      if (node[body].length > 0) {
        returns = getReturnStatements(node[body]);
        if (returns.length === 0) {
          node[body].push({
            type: 'ReturnStatement'
          });
        } else {
          returns.forEach(function(ret) {
            if (ret.argument) {
              ret.type = 'ExpressionStatement';
              return ret.expression = ret.argument;
            }
          });
        }
      }
    };

    return _Class;

  })(TransformerBase);

}).call(this);

//# sourceMappingURL=returns.js.map
