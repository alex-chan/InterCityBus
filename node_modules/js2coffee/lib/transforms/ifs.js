// Generated by CoffeeScript 1.10.0
(function() {
  var TransformerBase, emptyBodyBlock, noBody, nonComments,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  nonComments = require('../helpers').nonComments;

  TransformerBase = require('./base');


  /*
   * Ifs
   */

  module.exports = (function(superClass) {
    extend(_Class, superClass);

    function _Class() {
      return _Class.__super__.constructor.apply(this, arguments);
    }

    _Class.prototype.IfStatement = function(node) {
      this.handleBlankIfs(node);
      this.parenthesizeConditionals(node.test);
      return node;
    };

    _Class.prototype.ConditionalExpression = function(node, parent) {
      return this.parenthesizeFunctions(node, parent);
    };


    /*
     * Ensure any functions inside a ternary is parenthesized
     */

    _Class.prototype.parenthesizeFunctions = function(node, parent) {
      this.estraverse().traverse(node, {
        enter: function(node, parent) {
          var isFunction;
          isFunction = node.type === 'FunctionDeclaration' || node.type === 'FunctionExpression';
          if (isFunction) {
            return node._parenthesized = true;
          }
        }
      });
      return node;
    };


    /*
     * recurse into `test` and ensure any ConditionalExpression in it is
     * parenthesized. This prevents `if if a then b else c` from happening.
     */

    _Class.prototype.parenthesizeConditionals = function(node) {
      var specials;
      specials = ['ConditionalExpression', 'FunctionExpression'];
      return this.estraverse().traverse(node, {
        enter: function(subnode, parent) {
          if (~specials.indexOf(subnode.type)) {
            return subnode._parenthesized = true;
          }
        }
      });
    };


    /*
     * Ensure that empty ifs (`if (x){}`) get an else block.
     */

    _Class.prototype.handleBlankIfs = function(node) {
      if (noBody(node) || emptyBodyBlock(node) && !node.alternate) {
        node.alternate = {
          type: 'BlockStatement',
          body: []
        };
      }
      return node;
    };

    return _Class;

  })(TransformerBase);

  noBody = function(node) {
    return !node.consequent;
  };

  emptyBodyBlock = function(node) {
    var cons, result;
    cons = node.consequent;
    return result = cons && cons.type === 'BlockStatement' && nonComments(cons.body).length === 0;
  };

}).call(this);

//# sourceMappingURL=ifs.js.map
