// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  require('coffee-script/register');

  require('./setup');

  describe('BuilderBase', function() {
    var BuilderBase, ast, output;
    ast = void 0;
    output = void 0;
    BuilderBase = require('../lib/builder/base');
    beforeEach(function() {
      var MyWalker;
      ast = {
        type: 'Program',
        body: {
          type: 'Identifier',
          value: 'hi'
        }
      };
      MyWalker = (function(superClass) {
        extend(MyWalker, superClass);

        function MyWalker() {
          return MyWalker.__super__.constructor.apply(this, arguments);
        }

        MyWalker.prototype.Program = function(node) {
          return this.walk(node.body);
        };

        MyWalker.prototype.Identifier = function(node) {
          return node.value;
        };

        return MyWalker;

      })(BuilderBase);
      return output = new MyWalker(ast).run();
    });
    it('works', function() {
      return expect(output.toString()).eql('hi');
    });
    return it('spits out a SourceNode', function() {
      return expect(output.children).be.array;
    });
  });

}).call(this);

//# sourceMappingURL=builder_base.js.map
