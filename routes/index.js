// Generated by CoffeeScript 1.9.3
(function() {
  var Promise, _, config, express, fulfillBusline, fulfillHotlines, model, router;

  express = require('express');

  router = express.Router();

  _ = require("underscore");

  Promise = require("sequelize").Promise;

  model = require("../lib/model");

  config = require("../etc/config");

  fulfillHotlines = function(hotline) {
    return hotline.getStartCity().then(function(city) {
      hotline.startCity = {
        name: city.name,
        id: city.id
      };
      return hotline.getEndCity();
    }).then(function(city) {
      hotline.endCity = {
        name: city.name,
        id: city.id
      };
      return hotline;
    });
  };

  router.get('/', function(req, res, next) {
    var gcities;
    gcities = null;
    return model.City.findAll().then(function(cities) {
      gcities = cities;
      return model.Hotline.findAll({
        limit: config.maxHotlines,
        order: [['queryCount', 'DESC']]
      });
    }).then(function(hotlines) {
      var hotlines2;
      hotlines2 = _.map(hotlines, function(val, key, lst) {
        return fulfillHotlines(val);
      });
      return Promise.all(hotlines2);
    }).then(function(hotlines) {
      return res.render('index', {
        cities: gcities,
        hotlines: hotlines
      });
    });
  });

  fulfillBusline = function(busline) {
    var gbusline;
    gbusline = busline;
    return busline.getStartCity().then(function(city) {
      gbusline.startCity = {
        id: city.id,
        name: city.name,
        stations: []
      };
      return gbusline.getEndCity();
    }).then(function(city2) {
      gbusline.endCity = {
        id: city2.id,
        name: city2.name,
        stations: []
      };
      return gbusline.getStartTime();
    }).then(function(time) {
      gbusline.starttimes = time;
      return gbusline.getStations();
    }).then(function(stations) {
      gbusline.stations = stations;
      _.each(stations, function(element, index, list) {
        if (element.cityId === gbusline.startCity.id) {
          return gbusline.startCity.stations.push(element);
        } else if (element.cityId === gbusline.endCity.id) {
          return gbusline.endCity.stations.push(element);
        }
      });
      return gbusline;
    });
  };

  router.get('/busline/:id', function(req, res, next) {
    var gbusline;
    gbusline = null;
    return model.Busline.findById(req.params.id).then(function(busline) {
      return fulfillBusline(busline);
    }).then(function(busline) {
      gbusline = busline;
      return busline.getPhones();
    }).then(function(phones) {
      gbusline.phones = phones;
      return gbusline;
    }).then(function(busline) {
      return res.render('busline', {
        busline: busline
      });
    });
  });

  router.get('/buslines', function(req, res, next) {
    return model.Busline.findAll().then(function(buslines) {
      buslines = _.map(buslines, function(val, key, lst) {
        return fulfillBusline(val);
      });
      return Promise.all(buslines);
    }).then(function(buslines) {
      return res.render('buslines', {
        buslines: buslines
      });
    });
  });

  router.get('/search', function(req, res, next) {
    return model.Hotline.findOrCreate({
      where: {
        startCityId: req.query.start,
        endCityId: req.query.end
      }
    }).spread(function(hotline, created) {
      hotline.queryCount += 1;
      return hotline.save();
    }).then(function() {
      return model.Busline.findAll({
        where: {
          startCityId: req.query.start,
          endCityId: req.query.end
        }
      });
    }).then(function(buslines) {
      buslines = _.map(buslines, function(val, key, lst) {
        return fulfillBusline(val);
      });
      return Promise.all(buslines);
    }).then(function(buslines) {
      return res.render('buslines', {
        buslines: buslines
      });
    })["catch"](function(err) {
      return res.end(err.toString());
    });
  });

  router.get('/cities', function(req, res, next) {
    return model.City.findAll().then(function(cities) {
      return res.render('city', {
        cities: cities
      });
    });
  });

  router.get('/info', function(req, res, next) {
    return res.render('info');
  });

  router.get('/contact', function(req, res, next) {
    return res.render('contact');
  });

  module.exports = router;

}).call(this);
