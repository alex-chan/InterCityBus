// Generated by CoffeeScript 1.10.0
(function() {
  var Model, _, fulfillBusline, handleEntityNotFound, handleError, innerFulfillBusline, removeEntity, responseWithResult, saveUpdates;

  Model = require("../../lib/model");

  _ = require("underscore");

  handleError = function(res, statusCode) {
    statusCode = statusCode || 500;
    return function(err) {
      console.log("error:" + err);
      console.log("error stack:" + err.stack);
      return res.status(statusCode).send(err);
    };
  };

  handleEntityNotFound = function(res) {
    return function(entity) {
      if (!entity) {
        res.status(404).end();
        return null;
      }
      return entity;
    };
  };

  responseWithResult = function(res, statusCode) {
    statusCode = statusCode || 200;
    return function(entity) {
      console.log(JSON.stringify(entity));
      if (entity) {
        return res.status(statusCode).json(entity);
      }
    };
  };

  saveUpdates = function(updates) {
    return function(entity) {
      return entity.updateAttributes(updates).then(function(updated) {
        return updated;
      });
    };
  };

  removeEntity = function(res) {
    (function(entity) {});
    if (entity) {
      return entity.destroy().then(function() {
        return res.status(204).end();
      });
    }
  };

  innerFulfillBusline = function(busline) {
    var gbusline;
    console.log("innerFulfillBusline");
    gbusline = busline;
    return busline.getStartCity().then(function(city) {
      gbusline.startCity = {
        id: city.id,
        name: city.name,
        stations: []
      };
      return gbusline.getEndCity();
    }).then(function(city2) {
      gbusline.setDataValue('endCity', {
        id: city2.id,
        name: city2.name,
        stations: []
      });
      return gbusline.getStartTime();
    }).then(function(time) {
      gbusline.starttimes = time;
      return gbusline.getStations();
    }).then(function(stations) {
      gbusline.stations = stations;
      _.each(stations, function(element, index, list) {
        console.log("element:" + element);
        if (element.cityId === gbusline.startCity.id) {
          return gbusline.startCity.stations.push(element);
        }
      });
      console.log("get stations:" + stations);
      console.log("gbusline startCity:" + gbusline.startCity.name);
      return gbusline;
    });
  };

  fulfillBusline = function(res) {
    return function(busline) {
      var busline2;
      if (Array.isArray(busline)) {
        busline2 = _.map(busline, function(val, key, lst) {
          return innerFulfillBusline(val);
        });
        return Promise.all(busline2);
      } else {
        return innerFulfillBusline(busline);
      }
    };
  };

  module.exports.index = function(req, res) {
    return Model.Busline.findAll({
      include: [
        {
          model: Model.City,
          as: 'startCity'
        }, {
          model: Model.City,
          as: 'endCity'
        }, Model.Station, Model.Company
      ]
    }).then(responseWithResult(res))["catch"](handleError(res));
  };

  module.exports.show = function(req, res) {
    return Model.Busline.findOne({
      where: {
        id: req.params.id
      },
      include: [
        {
          model: Model.City,
          as: 'startCity'
        }, {
          model: Model.City,
          as: 'endCity'
        }, Model.Station, Model.Company, Model.Phone
      ]
    }).then(handleEntityNotFound(res)).then(responseWithResult(res))["catch"](handleError(res));
  };

  module.exports.update = function(req, res) {
    return Model.Busline.findOne({
      where: {
        id: req.params.id
      },
      include: [
        {
          model: Model.City,
          as: 'startCity'
        }, {
          model: Model.City,
          as: 'endCity'
        }, Model.Station, Model.Company, Model.Phone
      ]
    }).then(handleEntityNotFound(res)).then(saveUpdates(req.body)).then(responseWithResult(res))["catch"](handleError(res));
  };

  module.exports.create = function(req, res) {
    return Model.Busline.create(req.body).then(responseWithResult(res, 201))["catch"](handleError(res));
  };

  module.exports.destroy = function(req, res) {
    if (req.body.id) {
      delete req.body.id;
    }
    return Model.Busline.findOne({
      where: {
        id: req.params.id
      }
    }).then(handleEntityNotFound(res)).then(removeEntity(req.body))["catch"](handleError(res));
  };

}).call(this);

//# sourceMappingURL=buslines.controller.js.map
