// Generated by CoffeeScript 1.10.0
(function() {
  var Model, Sequelize, _, config, createRelated, handleEntityNotFound, handleError, removeEntity, responseWithResult, saveUpdates;

  Model = require("../../lib/model");

  config = require("../../config/config");

  Sequelize = require("../../lib/dbconn");

  _ = require("underscore");

  handleError = function(res, statusCode) {
    statusCode = statusCode || 500;
    return function(err) {
      console.log("error:" + err);
      console.log("error stack:" + err.stack);
      return res.status(statusCode).send(err);
    };
  };

  handleEntityNotFound = function(res) {
    return function(entity) {
      if (!entity) {
        res.status(404).end();
        return null;
      }
      return entity;
    };
  };

  responseWithResult = function(res, statusCode) {
    statusCode = statusCode || 200;
    return function(entity) {
      if (entity) {
        return res.status(statusCode).json(entity);
      }
    };
  };

  createRelated = function(updates) {
    return function(entity) {
      return entity.setStations([]).then(function() {
        return entity.setStartTime([]);
      }).then(function() {
        return entity.setPhones([]);
      }).then(function() {
        var ids, ids2;
        ids = _.map(updates.stations, function(item) {
          return item.id;
        });
        ids2 = ids.join(",");
        if (ids2 === "") {
          ids2 = "0";
        }
        return Model.Station.findAll({
          where: {
            id: {
              "in": ids
            }
          },
          order: [Sequelize.literal("FIELD(id, " + ids2 + ")")]
        });
      }).then(function(stations) {
        console.log("stations length:" + stations.length);
        return entity.setStations(stations);
      }).then(function() {
        var tids, tids2;
        tids = _.map(updates.StartTime, function(item) {
          return item.id;
        });
        tids2 = tids.join(",");
        if (tids2 === "") {
          tids2 = "0";
        }
        return Model.Starttime.findAll({
          where: {
            id: {
              "in": tids
            }
          },
          order: [Sequelize.literal("FIELD(id, " + tids2 + ")")]
        });
      }).then(function(starttimes) {
        return entity.setStartTime(starttimes);
      }).then(function() {
        var pids, pids2;
        pids = _.map(updates.phones, function(item) {
          return item.id;
        });
        pids2 = pids.join(",");
        if (pids2 === "") {
          pids2 = "0";
        }
        return Model.Phone.findAll({
          where: {
            id: {
              "in": pids
            }
          },
          order: [Sequelize.literal("FIELD(id, " + pids2 + ")")]
        });
      }).then(function(phones) {
        return entity.setPhones(phones);
      }).then(function() {
        return entity.save();
      }).then(function() {
        return updates;
      });
    };
  };

  saveUpdates = function(updates) {
    return function(entity) {
      var updatedOut;
      updatedOut = 0;
      return entity.update(updates).then(function(updated) {
        return updatedOut = updated;
      }).then(function() {
        return entity.setStations([]);
      }).then(function() {
        return entity.setStartTime([]);
      }).then(function() {
        return entity.setPhones([]);
      }).then(function() {
        var ids, ids2;
        ids = _.map(updates.stations, function(item) {
          return item.id;
        });
        ids2 = ids.join(",");
        if (ids2 === "") {
          ids2 = "0";
        }
        return Model.Station.findAll({
          where: {
            id: {
              "in": ids
            }
          },
          order: [Sequelize.literal("FIELD(id, " + ids2 + ")")]
        });
      }).then(function(stations) {
        console.log("stations length:" + stations.length);
        return entity.setStations(stations);
      }).then(function() {
        var tids, tids2;
        tids = _.map(updates.StartTime, function(item) {
          return item.id;
        });
        tids2 = tids.join(",");
        if (tids2 === "") {
          tids2 = "0";
        }
        return Model.Starttime.findAll({
          where: {
            id: {
              "in": tids
            }
          },
          order: [Sequelize.literal("FIELD(id, " + tids2 + ")")]
        });
      }).then(function(starttimes) {
        return entity.setStartTime(starttimes);
      }).then(function() {
        var pids, pids2;
        pids = _.map(updates.phones, function(item) {
          return item.id;
        });
        pids2 = pids.join(",");
        if (pids2 === "") {
          pids2 = "0";
        }
        return Model.Phone.findAll({
          where: {
            id: {
              "in": pids
            }
          },
          order: [Sequelize.literal("FIELD(id, " + pids2 + ")")]
        });
      }).then(function(phones) {
        return entity.setPhones(phones);
      }).then(function() {
        return entity.save();
      }).then(function() {
        return updatedOut;
      });
    };
  };

  removeEntity = function(res) {
    return function(entity) {
      if (entity) {
        return entity.destroy().then(function() {
          return res.status(204).end();
        });
      }
    };
  };

  module.exports.hotlines = function(req, res) {
    return Model.Hotline.findAll({
      limit: config.maxHotlines,
      include: [
        {
          model: Model.City,
          as: 'startCity'
        }, {
          model: Model.City,
          as: 'endCity'
        }
      ],
      order: [['queryCount', 'DESC']]
    }).then(responseWithResult(res))["catch"](handleError(res));
  };

  module.exports.index = function(req, res) {
    var where;
    where = {};
    if (req.query && req.query.start && req.query.end) {
      where = {
        startCityId: req.query.start,
        endCityId: req.query.end
      };
      Model.Hotline.findOrCreate({
        where: {
          startCityId: req.query.start,
          endCityId: req.query.end
        }
      }).spread(function(hotline, created) {
        hotline.queryCount += 1;
        return hotline.save();
      });
    }
    return Model.Busline.findAll({
      where: where,
      include: [
        {
          model: Model.City,
          as: 'startCity'
        }, {
          model: Model.City,
          as: 'endCity'
        }, {
          model: Model.Station
        }, Model.Company, {
          model: Model.Starttime,
          as: 'StartTime'
        }
      ],
      order: [[Model.Station, Model.BusLineStation, 'id', 'ASC']]
    }).then(responseWithResult(res))["catch"](handleError(res));
  };

  module.exports.show = function(req, res) {
    return Model.Busline.findOne({
      where: {
        id: req.params.id
      },
      include: [
        {
          model: Model.City,
          as: 'startCity'
        }, {
          model: Model.City,
          as: 'endCity'
        }, {
          model: Model.Station
        }, Model.Company, Model.Phone, {
          model: Model.Starttime,
          as: 'StartTime'
        }
      ],
      order: [
        [Model.Station, Model.BusLineStation, 'id', 'ASC'], [
          {
            model: Model.Starttime,
            as: 'StartTime'
          }, Model.BusLineStartTime, 'id', 'ASC'
        ]
      ]
    }).then(handleEntityNotFound(res)).then(responseWithResult(res))["catch"](handleError(res));
  };

  module.exports.update = function(req, res) {
    return Model.Busline.findOne({
      where: {
        id: req.params.id
      },
      include: [
        {
          model: Model.City,
          as: 'startCity'
        }, {
          model: Model.City,
          as: 'endCity'
        }, Model.Station, Model.Company, Model.Phone, {
          model: Model.Starttime,
          as: 'StartTime'
        }
      ]
    }).then(handleEntityNotFound(res)).then(saveUpdates(req.body)).then(responseWithResult(res))["catch"](handleError(res));
  };

  module.exports.create = function(req, res) {
    return Model.Busline.create(req.body).then(createRelated(req.body)).then(responseWithResult(res, 201))["catch"](handleError(res));
  };

  module.exports.destroy = function(req, res) {
    if (req.body.id) {
      delete req.body.id;
    }
    return Model.Busline.findOne({
      where: {
        id: req.params.id
      }
    }).then(handleEntityNotFound(res)).then(removeEntity(res))["catch"](handleError(res));
  };

}).call(this);

//# sourceMappingURL=buslines.controller.js.map
