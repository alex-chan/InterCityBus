// Generated by CoffeeScript 1.9.3
(function() {
  var BusLineStartTime, BusLineStation, Busline, City, Company, Promise, Sequelize, Station, Stime, User, _, getDate, squelize;

  _ = require("underscore");

  Sequelize = require("sequelize");

  squelize = require("./dbconn");

  Promise = require("sequelize").Promise;

  City = squelize.define('city', {
    name: Sequelize.STRING
  }, {
    freezeTableName: true
  });

  Station = squelize.define('station', {
    name: Sequelize.STRING,
    address: Sequelize.STRING
  }, {
    freezeTableName: true
  });

  Company = squelize.define('company', {
    name: Sequelize.STRING,
    phones: Sequelize.STRING,
    address: Sequelize.TEXT(500)
  }, {
    freezeTableName: true
  });

  Busline = squelize.define('busline', {
    name: Sequelize.STRING,
    description: Sequelize.STRING,
    price: Sequelize.INTEGER,
    paymethod: Sequelize.STRING
  });

  User = squelize.define('user', {
    name: Sequelize.STRING,
    realName: Sequelize.STRING,
    salt: Sequelize.STRING,
    password: Sequelize.STRING
  }, {
    freezeTableName: true
  });

  BusLineStation = squelize.define('busline_station', {
    freezeTableName: true
  });

  Stime = squelize.define('start_time', {
    time: Sequelize.TIME
  }, {
    freezeTableName: true
  });

  BusLineStartTime = squelize.define('busline_starttime', {
    freezeTableName: true
  });

  City.hasMany(Station);

  Station.belongsTo(City);

  Busline.belongsToMany(Station, {
    through: BusLineStation
  });

  Station.belongsToMany(Busline, {
    through: BusLineStation
  });

  Busline.belongsToMany(Stime, {
    as: "StartTime",
    through: BusLineStartTime
  });

  Stime.belongsToMany(Busline, {
    through: BusLineStartTime
  });

  Busline.belongsTo(City, {
    as: 'startCity',
    foreignKey: 'startCityId'
  });

  Busline.belongsTo(City, {
    as: 'endCity',
    foreignKey: 'endCityId'
  });

  City.hasMany(Busline, {
    as: 'LinesAsStartCity',
    foreignKey: 'startCityId'
  });

  City.hasMany(Busline, {
    as: 'LinesAsEndCity',
    foreignKey: 'endCityId'
  });

  Company.hasMany(Busline, {
    as: 'Lines'
  });

  Stime.sync({
    force: true
  }).then(function() {
    var baseTime, t, timeMap, timeSecList;
    baseTime = new Date(2015, 0, 1, 0, 0, 0);
    t = baseTime.getTime();
    timeSecList = _.range(0, 24 * 2);
    timeMap = _.map(timeSecList, function(val, key, list) {
      return {
        time: new Date(t + val * 1800e3)
      };
    });
    return Stime.bulkCreate(timeMap).then(function(lst) {});
  });

  BusLineStartTime.sync({
    force: true
  });

  BusLineStation.sync({
    force: true
  });

  Company.sync({
    force: true
  });

  getDate = function(timeString) {
    return new Date("2015 1 1," + timeString + ":00");
  };

  City.sync({
    force: true
  }).then(function() {
    var cityList, cityMap;
    cityList = ["广州", "深圳", "珠海", "佛山", "惠州", "湛江", "梅州", "汕头", "汕尾"];
    cityMap = _.map(cityList, function(val, key, list) {
      return {
        'name': val
      };
    });
    return City.bulkCreate(cityMap).then(function(lst) {
      return Busline.sync({
        force: true
      }).then(function() {
        return Busline.create({
          name: 'line one',
          price: 40
        }).then(function(line) {
          line.startCityId = cityList.indexOf("广州") + 1;
          line.endCityId = cityList.indexOf("深圳") + 1;
          return line.save().then(function() {
            return Station.sync({
              force: true
            }).then(function() {
              var stationList1;
              stationList1 = ["暨南大学西门", "广州大学城官洲地铁站"];
              return Promise.reduce(stationList1, function(total, item) {
                return Station.create({
                  name: item
                }).then(function(sta) {
                  return sta.setCity(cityList.indexOf("广州") + 1);
                });
              }, 0).then(function() {
                var stationList2;
                stationList2 = ["深圳大学北门", "世界之窗"];
                return Promise.reduce(stationList2, function(total, item) {
                  return Station.create({
                    name: item
                  }).then(function(sta) {
                    return sta.setCity(cityList.indexOf("深圳") + 1);
                  });
                }, 0).then(function() {
                  return Station.findAll().then(function(stations) {
                    line.setStations(stations);
                    return Stime.findAll({
                      where: {
                        $or: [
                          {
                            time: getDate("08:30")
                          }, {
                            time: getDate("10:00")
                          }
                        ]
                      }
                    }).then(function(t) {
                      return line.setStartTime(t);
                    });
                  });
                });
              });
            });
          });
        });
      });
    });
  });

  module.exports.City = City;

  module.exports.User = User;

  module.exports.Busline = Busline;

}).call(this);
